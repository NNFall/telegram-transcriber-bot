import requests
import json
import time
import telebot
import os

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
API_TOKEN = '7100666490:AAGm2BJ3bzwgL8eQX5FbgkLEWs1EdT8djJM'
bot = telebot.TeleBot(API_TOKEN)


def transcrip(audio_file):

    base_url = "https://api.assemblyai.com/v2"
    headers = { "authorization": "9f5ddac36691496ba8af256d934dae8e"}
    data = {"audio_url": audio_file,
            "speaker_labels": True,
            "language_code": "ru"}
    response = requests.post(base_url + "/transcript", headers=headers, json=data)

    if response.status_code != 200:
        print(f"Error: {response.status_code}, Response: {response.text}")
        response.raise_for_status()

    transcript_json = response.json() 
    transcript_id = transcript_json["id"]
    polling_endpoint = f"{base_url}/transcript/{transcript_id}"

    a = ''
    while True:
        transcript = requests.get(polling_endpoint, headers=headers).json()
        if transcript["status"] == "completed":
            for utterance in transcript["utterances"]:
                a += f"\nSpeaker {utterance["speaker"]}: {utterance["text"]}\n"
            return a
            break
        elif transcript["status"] == "error":
            raise RuntimeError(f"Transcription failed: {transcript['error']}")
        else:
            time.sleep(3)


def send_messages(messages, bot_token):  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ API.

    Args:
        messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
        bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞.

    Returns:
        –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç API –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    
    chat_id = "111111111"  # –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–π chat_id
    api_url = f"https://us1.api.pro-talk.ru/api/v1.0/ask/{bot_token}"
    last_response = None

    for message in messages:
        try:
            payload = {
                "bot_id": 21760,
                "chat_id": chat_id,
                "message": message
            }
            headers = {'Content-Type': 'application/json'}
            response = requests.post(api_url, json=payload, headers=headers)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            response.raise_for_status()  

            try:
                response_json = response.json()
                last_response = response_json.get('done', "–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'done'")
            except json.JSONDecodeError:
                last_response = f"–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç: {response.text}"
                print(last_response)
                break

        except requests.exceptions.RequestException as e:
            last_response = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"
            print(last_response)
            break

    return last_response

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–∫ "–ú—É–∑—ã–∫–∞/–ê—É–¥–∏–æ")
@bot.message_handler(content_types=['audio'])
def handle_audio(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–æ MP3 (—Ö–æ—Ç—è content_type='audio' —É–∂–µ —Ö–æ—Ä–æ—à–∏–π –ø—Ä–∏–∑–Ω–∞–∫)
        if message.audio.mime_type == 'audio/mpeg':
            file_id = message.audio.file_id
            print(f"–ü–æ–ª—É—á–µ–Ω MP3 (–∫–∞–∫ –∞—É–¥–∏–æ). File ID: {file_id}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
            file_info = bot.get_file(file_id)
            file_path = file_info.file_path

            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            # –í–ê–ñ–ù–û: –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–º–∏–Ω. 1 —á–∞—Å)!
            download_url = f"https://api.telegram.org/file/bot{API_TOKEN}/{file_path}"

            print(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {download_url}")
            
            bot_token = "0v0giWvreW2ddp1MKzJexH0uGeeZRAPW"
            audi = download_url
            messages = [transcrip(audi)]
            messages = ["üèÅ##"] + messages
            result = send_messages(messages, bot_token)
            print(result)

            
            bot.reply_to(message, f"–ü–æ–ª—É—á–∏–ª MP3 —Ñ–∞–π–ª!\n\n"
                                  f"{result}")
# –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª:
            # downloaded_file_bytes = bot.download_file(file_path)
            # file_name = message.audio.file_name or f"audio_{message.message_id}.mp3"
            # with open(file_name, 'wb') as new_file:
            #     new_file.write(downloaded_file_bytes)
            # print(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {file_name}")

        else:
            bot.reply_to(message, f"–ü–æ–ª—É—á–∏–ª –∞—É–¥–∏–æ—Ñ–∞–π–ª, –Ω–æ —ç—Ç–æ –Ω–µ MP3 (MIME-—Ç–∏–ø: {message.audio.mime_type}).")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª.")

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç MP3 —Ñ–∞–π–ª—ã...")
bot.polling(none_stop=True)
